cex = 3.5, direction = "both",
color = "#CD0000")
ggsave("PCA_species.png", width = 15, height = 12, units = "cm")
citation("vegan")
fit
# fit environemntal data onto pca ordination
fit <- envfit(pca_spec ~ ., data = env_dat[, -1],
choices = 1:2,
scaling = "symmetric",
permutations = 1000)
fit
# Plot 2: PCA ordination plot of species
# with plots colored by plant species richness
ggplot(species.scrs)+
geom_segment(aes(x = 0, y = 0, xend = PC1, yend = PC2), # arrows for environmental variables starting at 0
arrow = arrow(length = unit(0.2, "cm")), color = "#CD0000")+
geom_hline(yintercept = 0, color="grey", lty =1) +
geom_vline(xintercept = 0, color="grey", lty =1) +
theme_bw()+
labs(x = "PC1",
y = "PC2") +
guides(color = guide_legend(title = "No. of Plant Species"))+ # manual legend
geom_text_repel(aes(PC1*1.3, PC2*1.3,label = species_name),
cex = 3.5, direction = "both",
color = "#CD0000")
ggsave("PCA_species.png", width = 15, height = 12, units = "cm")
citation("vegan")
# percent stacked barplot
ggplot(spec_dat_rel, aes(x=Plant_SR, y=tot_rel_abundance, fill = Taxa))+
geom_bar(stat = "identity", position = "fill", # create percent stacked barchart
colour="white") +
scale_fill_brewer(type="qual", palette="RdBu")+
theme(panel.background = element_blank(),
panel.border = element_rect(colour = "black", fill = NA, size = 0.5),
legend.position = "right")+
labs(x = "Plant Species Richness", y = "Mean Relative Abundance")
# Figure 2: PCA ordination plot of species
ggplot(species.scrs)+
geom_segment(aes(x = 0, y = 0, xend = PC1, yend = PC2), # arrows for environmental variables starting at 0
arrow = arrow(length = unit(0.2, "cm")), color = "#CD0000")+
geom_hline(yintercept = 0, color="grey", lty =1) +
geom_vline(xintercept = 0, color="grey", lty =1) +
theme_bw()+
labs(x = "PC1",
y = "PC2") +
guides(color = guide_legend(title = "No. of Plant Species"))+ # manual legend
geom_text_repel(aes(PC1*1.3, PC2*1.3,label = species_name),
cex = 3.5, direction = "both",
color = "#CD0000")
citation(psych)
citation(psych)
citation("psych")
# Check relevance of PC axis via broken stick plot
screeplot(pca_spec, bstick = TRUE, type = "l",
main = NULL) # PC1:3 above the line
# display only axis greater than the mean
spec_ev > mean(spec_ev) # PC1:3 are relevant
# Check eigenvalues of each PC
summary(eigenvals(pca_spec)) # cumulative proportion of PC1 + PC2 = 58.44%
ordiplot(pca_spec, choices = c(2,3), display = "sites",
scaling = "symmetric")
# extract species scores with correct scaling (Bocard et al. 2011)
species.scrs <- scores(pca_spec, display=c("sp"), choices = c(2,3)
scaling = "symmetric") %>%
# extract species scores with correct scaling (Bocard et al. 2011)
species.scrs <- scores(pca_spec, display=c("sp"), choices = c(2,3),
scaling = "symmetric") %>%
as_tibble(rownames = "species_name")
# extract species scores with correct scaling (Bocard et al. 2011)
species.scrs <- scores(pca_spec, display=c("sp"), choices = c(2,3),
scaling = "symmetric") %>%
as_tibble(rownames = "species_name")
species.scrs
# extract site scores with correct scaling (Bocard et al. 2011)
site.scrs <- scores(pca_spec, display = c("sites"),
scaling = "symmetric") %>%
as_tibble(rownames = "sites")
site.scrs
# add site column from environmental data to PCA site scores
site.scrs <- cbind(site.scrs, Plant_SR = env_dat$Plant_SR)
site.scrs
# set seed to obtain equal results each time of analysis
set.seed(2)
# fit environemntal data onto pca ordination
fit <- envfit(pca_spec ~ ., data = env_dat[, -1],
choices = 1:2,
scaling = "symmetric",
permutations = 1000)
fit
# extract only significant p-values
env.scrs_sig <- as_tibble(scores(fit, display = "vectors")) %>% # extract scores
mutate(p.value = fit$vectors$pvals, # extract p-values
Env.variables = colnames(env_dat[2:6])) %>% # get variable names
subset(p.value<=0.05) # exclude non-significant variables
env.scrs_sig
# Figure 1: PCA ordination plot of sites/plots and significant environmental
# variables with plots colored by plant species richness
ggplot(site.scrs)+
geom_hline(yintercept = 0, color="grey", lty =1) +
geom_vline(xintercept = 0, color="grey", lty =1) +
geom_point(aes(PC1, PC2, color = factor(Plant_SR)), size = 3)+
geom_segment(data = env.scrs_sig, aes(x = 0, y = 0, xend = PC1, yend = PC2),
arrow = arrow(length = unit(0.2, "cm")), color = "#008B45")+
scale_colour_brewer(type="qual", palette="RdBu")+
theme_bw()+
labs(x = "PC1 (33.69 %)", y = "PC2 (24.74 %) ")+
guides(color = guide_legend(title = "No. of Plant Species",
position = "bottom",
direction = "horizontal", nrow = 1))+
theme(legend.background = element_rect(color = "black",
fill = "white",
size = 0.1,
linetype = "solid"))+
geom_text_repel(data = env.scrs_sig, aes(PC1, PC2*1.2, label = Env.variables),
color = "#008B45", size = 3)
ggsave("PCA_plots_axis2_and_3.png", width = 15, height = 15, units = "cm")
# set seed to obtain equal results each time of analysis
set.seed(2)
# fit environemntal data onto pca ordination
fit <- envfit(pca_spec ~ ., data = env_dat[, -1],
choices = 2:3,
scaling = "symmetric",
permutations = 1000)
fit
# extract only significant p-values
env.scrs_sig <- as_tibble(scores(fit, display = "vectors")) %>% # extract scores
mutate(p.value = fit$vectors$pvals, # extract p-values
Env.variables = colnames(env_dat[2:6])) %>% # get variable names
subset(p.value<=0.05) # exclude non-significant variables
env.scrs_sig
# Figure 1: PCA ordination plot of sites/plots and significant environmental
# variables with plots colored by plant species richness
ggplot(site.scrs)+
geom_hline(yintercept = 0, color="grey", lty =1) +
geom_vline(xintercept = 0, color="grey", lty =1) +
geom_point(aes(PC1, PC2, color = factor(Plant_SR)), size = 3)+
geom_segment(data = env.scrs_sig, aes(x = 0, y = 0, xend = PC1, yend = PC2),
arrow = arrow(length = unit(0.2, "cm")), color = "#008B45")+
scale_colour_brewer(type="qual", palette="RdBu")+
theme_bw()+
labs(x = "PC1 (33.69 %)", y = "PC2 (24.74 %) ")+
guides(color = guide_legend(title = "No. of Plant Species",
position = "bottom",
direction = "horizontal", nrow = 1))+
theme(legend.background = element_rect(color = "black",
fill = "white",
size = 0.1,
linetype = "solid"))+
geom_text_repel(data = env.scrs_sig, aes(PC1, PC2*1.2, label = Env.variables),
color = "#008B45", size = 3)
# Figure 1: PCA ordination plot of sites/plots and significant environmental
# variables with plots colored by plant species richness
ggplot(site.scrs)+
geom_hline(yintercept = 0, color="grey", lty =1) +
geom_vline(xintercept = 0, color="grey", lty =1) +
geom_point(aes(PC2, PC3, color = factor(Plant_SR)), size = 3)+
geom_segment(data = env.scrs_sig, aes(x = 0, y = 0, xend = PC1, yend = PC2),
arrow = arrow(length = unit(0.2, "cm")), color = "#008B45")+
scale_colour_brewer(type="qual", palette="RdBu")+
theme_bw()+
labs(x = "PC1 (33.69 %)", y = "PC2 (24.74 %) ")+
guides(color = guide_legend(title = "No. of Plant Species",
position = "bottom",
direction = "horizontal", nrow = 1))+
theme(legend.background = element_rect(color = "black",
fill = "white",
size = 0.1,
linetype = "solid"))+
geom_text_repel(data = env.scrs_sig, aes(PC1, PC2*1.2, label = Env.variables),
color = "#008B45", size = 3)
# add site column from environmental data to PCA site scores
site.scrs <- cbind(site.scrs, Plant_SR = env_dat$Plant_SR)
site.scrs
# extract only significant p-values
env.scrs_sig <- as_tibble(scores(fit, display = "vectors")) %>% # extract scores
mutate(p.value = fit$vectors$pvals, # extract p-values
Env.variables = colnames(env_dat[2:6])) %>% # get variable names
subset(p.value<=0.05) # exclude non-significant variables
env.scrs_sig
# fit environemntal data onto pca ordination
fit <- envfit(pca_spec ~ ., data = env_dat[, -1],
choices = 2:3,
scaling = "symmetric",
permutations = 1000)
fit
# extract eigenvalues
spec_ev <- pca_spec$CA$eig
# display only axis greater than the mean
spec_ev > mean(spec_ev) # PC1:3 are relevant
# Check eigenvalues of each PC
summary(eigenvals(pca_spec)) # cumulative proportion of PC1 + PC2 = 58.44%
# extract species scores with correct scaling (Bocard et al. 2011)
species.scrs <- scores(pca_spec, display=c("sp"),
scaling = "symmetric") %>%
as_tibble(rownames = "species_name")
species.scrs
# extract site scores with correct scaling (Bocard et al. 2011)
site.scrs <- scores(pca_spec, display = c("sites"),
scaling = "symmetric") %>%
as_tibble(rownames = "sites")
site.scrs
# add site column from environmental data to PCA site scores
site.scrs <- cbind(site.scrs, Plant_SR = env_dat$Plant_SR)
site.scrs
# set seed to obtain equal results each time of analysis
set.seed(2)
# fit environemntal data onto pca ordination
fit <- envfit(pca_spec ~ ., data = env_dat[, -1],
choices = 1:2,
scaling = "symmetric",
permutations = 1000)
fit
# extract only significant p-values
env.scrs_sig <- as_tibble(scores(fit, display = "vectors")) %>% # extract scores
mutate(p.value = fit$vectors$pvals, # extract p-values
Env.variables = colnames(env_dat[2:6])) %>% # get variable names
subset(p.value<=0.05) # exclude non-significant variables
env.scrs_sig
# Figure 1: PCA ordination plot of sites/plots and significant environmental
# variables with plots colored by plant species richness
ggplot(site.scrs)+
geom_hline(yintercept = 0, color="grey", lty =1) +
geom_vline(xintercept = 0, color="grey", lty =1) +
geom_point(aes(PC1, PC2, color = factor(Plant_SR)), size = 3)+
geom_segment(data = env.scrs_sig, aes(x = 0, y = 0, xend = PC1, yend = PC2),
arrow = arrow(length = unit(0.2, "cm")), color = "#008B45")+
scale_colour_brewer(type="qual", palette="RdBu")+
theme_bw()+
labs(x = "PC1 (33.69 %)", y = "PC2 (24.74 %) ")+
guides(color = guide_legend(title = "No. of Plant Species",
position = "bottom",
direction = "horizontal", nrow = 1))+
theme(legend.background = element_rect(color = "black",
fill = "white",
size = 0.1,
linetype = "solid"))+
geom_text_repel(data = env.scrs_sig, aes(PC1, PC2*1.2, label = Env.variables),
color = "#008B45", size = 3)
# PCA on "psych"# PCA on Hellinger-transformed data
pca_spec <- rda(spec_dat_hell,
scale = FALSE) # species data is already on the same scale
# Check eigenvalues of each PC
summary(eigenvals(pca_spec)) # cumulative proportion of PC1 + PC2 = 58.44%
# Figure 1: PCA ordination plot of sites/plots and significant environmental
# variables with plots colored by plant species richness
ggplot(site.scrs)+
geom_hline(yintercept = 0, color="grey", lty =1) +
geom_vline(xintercept = 0, color="grey", lty =1) +
geom_point(aes(PC1, PC2, color = factor(Plant_SR)), size = 3)+
geom_segment(data = env.scrs_sig, aes(x = 0, y = 0, xend = PC1, yend = PC2),
arrow = arrow(length = unit(0.2, "cm")), color = "#008B45")+
scale_colour_brewer(type="qual", palette="RdBu")+
theme_bw()+
labs(x = "PC1 (33.69 %)", y = "PC2 (24.74 %) ")+
guides(color = guide_legend(title = "No. of Plant Species",
position = "bottom",
direction = "horizontal", nrow = 1))+
theme(legend.background = element_rect(color = "black",
fill = "white",
size = 0.1,
linetype = "solid"))+
geom_text_repel(data = env.scrs_sig, aes(PC1, PC2*1.2, label = Env.variables),
color = "#008B45", size = 3)
# Packages ----
library(tidyverse)
library(ggplot2)
library(vegan)
library(car)
library(ggcorrplot)
library(ggvegan)
library(ggrepel)
# Datasets ----
taxa_dat <- read_csv("data/JenaExp_arthropod_taxa.csv")
treatments <- read_csv("data/JenaExp_treatments.csv")
# checking for nans
anyNA(taxa_dat) # no none
anyNA(treatments) # no none
# checking for duplicates
sum(duplicated(taxa_dat)) # none
sum(duplicated(treatments)) #none
# min and max values taxa_dat
for (i in colnames(taxa_dat)[-1]) { # iterate on all but the plotcode column
max_value <- max(taxa_dat[[i]])
min_value <- min(taxa_dat[[i]])
message_min <- sprintf("%s min: %s", i, min_value)
print(message_min)
message_max <- sprintf("%s max: %s", i, max_value)
print(message_max)
}
# min is 0 (next is 2), max is 1917
rm(i, max_value, min_value, message_min, message_max)
# DCA to determine length of gradient in our data
decorana(taxa_dat[-1])
# Transformation
community_matrix <- taxa_dat[,-1] %>%
as.matrix() %>%
decostand(method = "hellinger")
## 1. on raw data ----
# from lucas' script
pca_sp_raw <- rda(taxa_dat[,-1],
scale = FALSE)
pca_sp_raw
screeplot(pca_sp_raw, bstick = TRUE, type = "l",
main = NULL) # only PCA1 lay above the line!
# ..and
summary(eigenvals(pca_sp_raw)) # our eigenvalues don't make to much sense
# they look fucking weird as well
ordiplot (pca_sp_raw, scaling = "symmetric")
biplot(pca_sp_raw, scaling = "symmetric")
## 2. on transformed data ----
set.seed(1)
pca_sp_trans <- rda(community_matrix[,-1])
pca_sp_trans
screeplot(pca_sp_trans, bstick = TRUE, type = "l",
main = NULL) # PC1-3 above the line
summary(eigenvals(pca_sp_trans))
## PCA scores/Plots of PC1 & PC2 ----
scores(pca_sp_trans, choices = 1:2, display = c("sites"))
scores(pca_sp_trans, choices = 1:2, display = c("species"))
# Coleoptera_rest and Carabidae the main contributors as their vectors run the longest across the axes of PC1 and PC2 respectively
ordiplot (pca_sp_trans, scaling = "symmetric")
biplot(pca_sp_trans, scaling = "symmetric")
set.seed(1)
ordipointlabel(pca_sp_trans,
display = "sites",
scaling = "symmetric")
set.seed(1)
plot(pca_sp_trans, display = "sites",
scaling = "symmetric", type = "n")
points(pca_sp_trans, display = "sites",
scaling = "symmetric", pch = 19,
col = "orange")
ordipointlabel(pca_sp_trans,
display = "sites",
scaling = "symmetric",
add = TRUE)
# Including categorical data
length(unique(treatments$Plant_SR))
### Colors based on plant_SR value ----
col_vec <- c("green", "pink", "blue", "magenta", "orange", "turquoise")
plot(pca_sp_trans, type = "n", scaling = "symmetric",
display = "sites")
cols <- with(treatments, col_vec[as.factor(Plant_SR)]) # as.factor to not consider them numeric
points(pca_sp_trans, display = "sites", scaling = "symmetric",
pch = 19, col = cols, cex = 2)
lvl <- levels(as.factor(treatments$Plant_SR))
legend("topright", legend = lvl,
bty = "n", col = col_vec, pch = 19)
### Convex hulls around groups of data --> TOO MUCH GOING ON HERE? ----
plot(pca_sp_trans, type = "n", scaling = "symmetric",
display = "sites")
ordihull(pca_sp_trans, groups = as.factor(treatments$Plant_SR),
col = col_vec,
scaling = "symmetric", lwd = 2)
ordispider(pca_sp_trans, groups = as.factor(treatments$Plant_SR),
col = col_vec,
scaling ="symmetric", label = TRUE)
points(pca_sp_trans, display = "sites", scaling = "symmetric",
pch = 21, col = "black", bg ="gray")
# first plot coordinates
plot(pca_sp_trans, type = "n", scaling = "symmetric",
display = "sites")
## ellipsoid hull
ordiellipse(pca_sp_trans, groups = as.factor(treatments$Plant_SR),
kind = "ehull", col = col_vec,
scaling = "symmetric", lwd = 2)
## standard error of centroid ellipse (statard error calculated for the center)
ordiellipse(pca_sp_trans, groups = as.factor(treatments$Plant_SR),
draw = "polygon", col = col_vec,
scaling = "symmetric", lwd = 2)
ordispider(pca_sp_trans, groups = as.factor(treatments$Plant_SR),
col = col_vec,
scaling = "symmetric", label = TRUE)
points(pca_sp_trans, display = "sites", scaling = "symmetric",
pch = 21, col = "black", bg ="gray")
# Calculate Shannon diversity index
shannon_diversity <- diversity(taxa_dat[, -1], index = "shannon")
# Calculate Simpson diversity index
simpson_diversity <- diversity(taxa_dat[, -1], index = "simpson")
# Calculate Gamma Diversity (overall diversity)
# gamma diversity for the entire dataset can be calculated by combining all plots
gamma_diversity_shannon <- diversity(colSums(taxa_dat[, -1]), index = "shannon")
gamma_diversity_simpson <- diversity(colSums(taxa_dat[, -1]), index = "simpson")
# Calculate Beta Diversity
# using Bray-Curtis dissimilarity as a measure of beta diversity
beta_diversity <- vegdist(taxa_dat[, -1], method = "bray")
# Combine the site identifier and calculated diversity indices
site_diversity <- data.frame(plotcode = taxa_dat$plotcode, shannon_diversity = shannon_diversity, simpson_diversity = simpson_diversity)
# Print the results
print(site_diversity)
gamma_diversity_shannon
gamma_diversity_simpson
beta_diversity
# Calculate summary statistics for beta diversity
mean(beta_diversity) # average
min(beta_diversity) # minimum
max(beta_diversity) # maximum
# Ordisurf  with shannon gradient
par(mfrow=c(2,2))
fit_shannon <- ordisurf(pca_sp_trans ~ shannon_diversity,
data = site_diversity,
main = NULL)
title("Shannon")
# points(pca_sp_trans, display = "sites")
# text(pca_sp_trans, display = "sites", labels = site_diversity$plotcode, cex = 0.7, pos = 3)
summary(fit_shannon)
# rdisurf  with simpson gradient
fit_simpson <- ordisurf(pca_sp_trans ~ simpson_diversity,
data = site_diversity,
main = NULL)
title("Simpson")
# points(pca_sp_trans, display = "sites")
# text(pca_sp_trans, display = "sites", labels = site_diversity$plotcode, cex = 0.7, pos = 3)
summary(fit_simpson)
# plant_sr gradient
fit_sr <- ordisurf(pca_sp_trans ~ Plant_SR,
data = treatments,
main = NULL)
title("Plant_SR")
# points(pca_sp_trans, display = "sites")
# text(pca_sp_trans, display = "sites", labels = site_diversity$plotcode, cex = 0.7, pos = 3)
summary(fit_sr)
# Fit environmental variables (plant-diversity treatments) to the PCA
envfit_result <- envfit(pca_sp_trans ~ Plant_SR + Grasses + Legumes + Short.Herbs + Tall.Herbs, data = treatments)
# Add the environmental fit vectors to the PCA biplot
plot(pca_sp_trans, scaling = 2, main = "PCA with Environmental Vectors")
points(pca_sp_trans, display = "sites", col = treatments$Plant_SR, pch = 19)
plot(envfit_result, p.max = 0.05, col = "red")
# Plotting ordination diagram using ggplot  --> TOTALLY TOO MUCH BUT MIGHT BE NICE TO HAVE ALL CONCENTRATED ----
# Extract PCA site scores
site_scores <- scores(pca_sp_trans, display = "sites", scaling = 2)
site_scores_df <- as.data.frame(site_scores)
site_scores_df$Plant_SR <- as.factor(treatments$Plant_SR)
site_scores_df$plotcode <- treatments$plotcode
# Extract PCA species scores
species_scores <- scores(pca_sp_trans, display = "species", scaling = 2)
species_scores_df <- as.data.frame(species_scores)
species_scores_df$taxa <- rownames(species_scores_df)
# Fit environmental variables (plant-diversity treatments) to the PCA
envfit_result <- envfit(pca_sp_trans ~ Plant_SR + Grasses + Legumes + Short.Herbs + Tall.Herbs, data = treatments)
envfit_vectors <- as.data.frame(scores(envfit_result, display = "vectors"))
envfit_vectors$variable <- rownames(envfit_vectors)
# Define custom color vector
col_vec <- c("green", "pink", "blue", "magenta", "orange", "turquoise")
# Create a combined biplot with sites, taxa, and environmental vectors
p <- ggplot() +
# Plot site scores
geom_point(data = site_scores_df, aes(x = PC1, y = PC2, color = Plant_SR), size = 3) +
geom_text_repel(data = site_scores_df, aes(x = PC1, y = PC2, label = plotcode), size = 3, max.overlaps = 20) +
# Plot species scores with ggrepel to avoid overlap and larger font size
geom_text_repel(data = species_scores_df, aes(x = PC1, y = PC2, label = taxa), color = "red", size = 3, max.overlaps = 20) +
# Plot environmental vectors with larger font size
geom_segment(data = envfit_vectors, aes(x = 0, xend = PC1, y = 0, yend = PC2), arrow = arrow(length = unit(0.3, "cm")), color = "red") +
geom_text_repel(data = envfit_vectors, aes(x = PC1, y = PC2, label = variable), color = "blue", size = 5, max.overlaps = 20) +
# Additional plot styling
scale_color_manual(values = col_vec) +
labs(title = "PCA of Hellinger-transformed Arthropod Data with Environmental Vectors",
x = "PC1", y = "PC2", color = "Plant Species Richness") +
theme_minimal() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.border = element_blank(),
axis.line = element_line(color = "black"),
axis.text = element_text(size = 12),
axis.title = element_text(size = 14),
plot.title = element_text(size = 16, face = "bold"),
panel.background = element_blank()) +
coord_fixed(ratio = 1, xlim = c(min(site_scores_df$PC1, species_scores_df$PC1) - 0.1, max(site_scores_df$PC1, species_scores_df$PC1) + 0.1),
ylim = c(min(site_scores_df$PC2, species_scores_df$PC2) - 0.1, max(site_scores_df$PC2, species_scores_df$PC2) + 0.1)) +
geom_hline(yintercept = 0, linetype = "dashed") +
geom_vline(xintercept = 0, linetype = "dashed")
print(p)
#...................................
# Distance measures/PERMANOVA ----
#...................................
# calculation of different distance measures using transformed data, in order for comparisons to be "fairer"
dis_euc_taxa<-vegdist(community_matrix,"euclidean")
dis_bc_taxa<-vegdist(community_matrix,"bray")
dis_jacc_taxa<-vegdist(community_matrix,"jaccard", binary=T)
dis_chi_taxa<-vegdist(community_matrix,"chisq")
# Distance vector of plot species richness differences
dis_plant_sr<-dist(treatments$Plant_SR, 'euclidean')
# Relationship between distance in species space and environmental distance
par(mfrow=c(2,2))
plot(dis_euc_taxa,dis_plant_sr,main="Euclidean vs. Plant_SR")
plot(dis_bc_taxa,dis_plant_sr, main="Bray-Curtis vs. Plant_SR")
plot(dis_jacc_taxa,dis_plant_sr, main="Jaccard vs. Plant_SR")
plot(dis_chi_taxa,dis_plant_sr,main="Chi-Square vs. Plant_SR")
## Pearson correlation between distances
cor(dis_euc_taxa,dis_plant_sr)
cor(dis_bc_taxa,dis_plant_sr)
cor(dis_jacc_taxa,dis_plant_sr)
cor(dis_chi_taxa,dis_plant_sr)
# Perform PERMANOVA to test how significant the effect of each treatment is, (SIMPLE ANOVA DOESN'T WORK HERE, BUT PERMANOVA IS A ROBUST TOOL FOR MULTIVARIATE AND NON-PARAMETRIC ANALYSIS, MEANING I DON'T EVEN NEED TO CHECK NORMALITY OF RESIDUALS)
# use of bray-curtis simply because it is generally well suited for abundance data, use of jaccard proved fruitless
set.seed(1)
permanova_result <- adonis2(dis_bc_taxa ~ Plant_SR + Grasses + Short.Herbs + Tall.Herbs + Legumes, data = treatments, permutations = 999)
# Perform PERMANOVA to test how significant the effect of each treatment is, (SIMPLE ANOVA DOESN'T WORK HERE, BUT PERMANOVA IS A ROBUST TOOL FOR MULTIVARIATE AND NON-PARAMETRIC ANALYSIS, MEANING I DON'T EVEN NEED TO CHECK NORMALITY OF RESIDUALS)
# use of bray-curtis simply because it is generally well suited for abundance data, use of jaccard proved fruitless
set.seed(1)
permanova_result <- adonis2(dis_bc_taxa ~ Plant_SR + Grasses + Short.Herbs + Tall.Herbs + Legumes, data = treatments, permutations = 999)
# Print the results
print(permanova_result)
# Perform PERMANOVA to test how significant the effect of each treatment is, (SIMPLE ANOVA DOESN'T WORK HERE, BUT PERMANOVA IS A ROBUST TOOL FOR MULTIVARIATE AND NON-PARAMETRIC ANALYSIS, MEANING I DON'T EVEN NEED TO CHECK NORMALITY OF RESIDUALS)
# use of bray-curtis simply because it is generally well suited for abundance data, use of jaccard proved fruitless
set.seed(1)
permanova_result <- adonis2(dis_bc_taxa ~ Plant_SR + Grasses + Short.Herbs + Tall.Herbs + Legumes, data = treatments, permutations = 999)
# Print the results
print(permanova_result)
View(spec_dat)
permanova_result <- adonis2(spec_dat ~ Plant_SR + Grasses + Short.Herbs + Tall.Herbs + Legumes, data = treatments, permutations = 999)
fit
View(spec_dat)
